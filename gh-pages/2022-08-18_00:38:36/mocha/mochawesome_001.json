{
  "stats": {
    "suites": 11,
    "tests": 11,
    "passes": 4,
    "pending": 0,
    "failures": 7,
    "start": "2022-08-18T00:38:00.568Z",
    "end": "2022-08-18T00:38:33.488Z",
    "duration": 32920,
    "testsRegistered": 11,
    "passPercent": 36.36363636363637,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0d9e987a-52cf-4486-8e4f-3e75aae8818e",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae5f301a-1888-47d4-ae92-dcc171abffa5",
          "title": "Test Scenario 1: DID Resolution Result fixtures: https://dev.uniresolver.io/1.0/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: https://dev.uniresolver.io/1.0/identifiers/ A correct DID can be resolved",
              "timedOut": null,
              "duration": 6841,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"].replace(/\\s+/g, \"\")).contains('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:39709/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:39709/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:39709/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:39709/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:39709/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:39709/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:125:13)",
                "diff": null
              },
              "uuid": "b2b38118-88a9-43ce-b280-ea9321ab3f0a",
              "parentUUID": "ae5f301a-1888-47d4-ae92-dcc171abffa5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b2b38118-88a9-43ce-b280-ea9321ab3f0a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6841,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "29850362-ad2a-4268-9db7-3494df72b406",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 6791,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).has.property(\"id\").contains(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:39709/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:39709/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:39709/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:39709/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:39709/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:39709/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:151:13)",
                "diff": null
              },
              "uuid": "8abe9ee6-e753-490e-ba38-7692caca7427",
              "parentUUID": "29850362-ad2a-4268-9db7-3494df72b406",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8abe9ee6-e753-490e-ba38-7692caca7427"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6791,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87191026-d77c-4036-9f6d-623c987b07d7",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 6775,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:39709/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:39709/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:39709/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:39709/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:39709/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:39709/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:200:13)",
                "diff": null
              },
              "uuid": "ab525944-ee0c-4723-8f0d-9436d2b65675",
              "parentUUID": "87191026-d77c-4036-9f6d-623c987b07d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ab525944-ee0c-4723-8f0d-9436d2b65675"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6775,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "02f455ea-df12-4081-b713-2d447345330b",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 375,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {},
              "uuid": "1bb95316-e432-44c3-a841-7fa3e1d2a060",
              "parentUUID": "02f455ea-df12-4081-b713-2d447345330b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1bb95316-e432-44c3-a841-7fa3e1d2a060"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 375,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be029465-412b-419e-9f0f-1c43a9c9a334",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {},
              "uuid": "b59fd3b7-6286-45ae-b4c6-7fc8ee27320a",
              "parentUUID": "be029465-412b-419e-9f0f-1c43a9c9a334",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b59fd3b7-6286-45ae-b4c6-7fc8ee27320a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "573b9fe5-d740-4301-a338-9a787f88e1c7",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3ec52644-f592-4f14-9e9a-d59857b89ae3",
              "parentUUID": "573b9fe5-d740-4301-a338-9a787f88e1c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ec52644-f592-4f14-9e9a-d59857b89ae3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "54c9a206-3be6-4691-82f0-e059ebcf94e6",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 87,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:289:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "236332c9-4350-47e2-995a-cebb1f10f6d4",
              "parentUUID": "54c9a206-3be6-4691-82f0-e059ebcf94e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "236332c9-4350-47e2-995a-cebb1f10f6d4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d51a762-f17e-4cbd-b944-62c38e198235",
          "title": "Test Scenario 8: Service and relativeRef parameters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetches DID",
              "fullTitle": "Test Scenario 8: Service and relativeRef parameters Fetches DID",
              "timedOut": null,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"relativeParamDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    console.log(\"FRAGMENT DID IS\", fragmentDid);\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      headers: {\n        Accept: \"text/uri-list\"\n      },\n      failOnStatusCode: false\n    }).as(\"response\");\n    it(\"MUST return HTTP response status equals 303\", () => {\n      cy.get(\"@response\").then(response => {\n        expect(response.status).to.eq(303);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "16df40ba-cc79-4b7f-a4b9-710db3ac44ef",
              "parentUUID": "5d51a762-f17e-4cbd-b944-62c38e198235",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16df40ba-cc79-4b7f-a4b9-710db3ac44ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d7fe812-e517-4195-b9fe-5c036f26ee9b",
          "title": "Test Scenario 9: DID URLs with transformKeys",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 60,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"transformKeyDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const transformKeyDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + transformKeyDid,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response).to.be.a(\"object\");\n      response.body.verificationMethod.forEach(out => {\n        expect(out).has.property(\"type\").to.be.oneOf([\"JsonWebKey2020\", \"Ed25519VerificationKey2018\", \"X25519KeyAgreementKey2019\"]);\n      });\n      expect(response.headers[\"content-type\"]).contains(\"application/did+ld+json\");\n      expect(response.body).has.property(\"id\", decodeURIComponent(transformKeyDid.split(\"?\")[0].split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:343:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "65a2d1cc-bac5-4510-bf43-6b72dfe30fb3",
              "parentUUID": "8d7fe812-e517-4195-b9fe-5c036f26ee9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "65a2d1cc-bac5-4510-bf43-6b72dfe30fb3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d7bc20b-d415-4fbc-a25c-c52ba928deb0",
          "title": "Test Scenario 12: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 5929,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).contains(\"application/did+json;charset=utf-8\");\n      expect(response.body).has.property(\"id\", normalDid); // expect(response.body[\"keyAgreement\"][0]).to.contain(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:39709/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:39709/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:39709/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:39709/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:39709/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:39709/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:375:13)",
                "diff": null
              },
              "uuid": "8f1609ee-a874-419a-af06-935f3b5ece03",
              "parentUUID": "4d7bc20b-d415-4fbc-a25c-c52ba928deb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8f1609ee-a874-419a-af06-935f3b5ece03"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5929,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1578d0fa-21b1-43a2-bf03-97f39de2eaf3",
          "title": "Test Scenario 12B: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12B: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 5617,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"].replace(/\\s+/g, \"\")).contains('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:39709/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:39709/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:39709/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:39709/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:39709/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:39709/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:39709/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:39709/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:39709/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:39709/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:400:13)",
                "diff": null
              },
              "uuid": "cb00233e-2022-4fba-84b2-922637273735",
              "parentUUID": "1578d0fa-21b1-43a2-bf03-97f39de2eaf3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cb00233e-2022-4fba-84b2-922637273735"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5617,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}