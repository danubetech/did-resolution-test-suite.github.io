{
  "stats": {
    "suites": 22,
    "tests": 22,
    "passes": 4,
    "pending": 0,
    "failures": 18,
    "start": "2023-11-21T00:29:01.670Z",
    "end": "2023-11-21T00:29:26.276Z",
    "duration": 24606,
    "testsRegistered": 22,
    "passPercent": 18.181818181818183,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "562f8d5e-8d44-4eaf-8889-f3ce59a5a97b",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_spec.js",
      "file": "cypress/integration/uniresolver_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7913d1c5-6eea-4bd2-acf4-2857ec3792a5",
          "title": "Test Scenario 1: DID Resolution Result fixtures: https://dev.uniresolver.io/1.0/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: https://dev.uniresolver.io/1.0/identifiers/ A correct DID can be resolved",
              "timedOut": null,
              "duration": 5861,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.clearCookies();\ncy.fixture(path_example_dids).its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"].replace(/\\s+/g, \"\")).contains('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response).to.be.a(\"object\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body.didDocument.id).to.be.a(\"string\").and.satisfy(msg => msg.startsWith(\"did:\"));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:37727/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:37727/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:37727/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:37727/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:37727/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:37727/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:134:13)",
                "diff": null
              },
              "uuid": "f5e6b6eb-6b66-4970-bda3-e07730dae106",
              "parentUUID": "7913d1c5-6eea-4bd2-acf4-2857ec3792a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f5e6b6eb-6b66-4970-bda3-e07730dae106"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5861,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d655a78-9512-4e12-a84c-014482ebb58f",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 5276,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      cy.get(\"@request\").then(response => {\n        expect(response).to.be.a(\"object\");\n      });\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body[\"id\"]).to.contain(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:37727/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:37727/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:37727/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:37727/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:37727/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:37727/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:160:15)",
                "diff": null
              },
              "uuid": "a1625f2d-7b7f-4c2e-b76e-5e9aa262618c",
              "parentUUID": "7d655a78-9512-4e12-a84c-014482ebb58f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a1625f2d-7b7f-4c2e-b76e-5e9aa262618c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5276,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aefb0d42-7308-4586-b33c-67d50051deee",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 179,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n      console.log(response);\n      expect(response.body.dereferencingMetadata.error).to.eq('\"representationNotSupported\"');\n    });\n  });\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'error')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'error')\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:213:56)",
                "diff": null
              },
              "uuid": "0bebd172-6cb3-4910-b539-be67838e8bcc",
              "parentUUID": "aefb0d42-7308-4586-b33c-67d50051deee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0bebd172-6cb3-4910-b539-be67838e8bcc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fbdcc98a-0bb6-449d-8288-28043cb918a1",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 5054,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:indicio:test:16vv8izCToK4svjYjvsp4r\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:indicio:test:16vv8izCToK4svjYjvsp4r\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:37727/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:37727/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:37727/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:37727/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:37727/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:37727/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:227:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:225:27)",
                "diff": null
              },
              "uuid": "b168ae2b-a710-4978-811c-c4180ba56a99",
              "parentUUID": "fbdcc98a-0bb6-449d-8288-28043cb918a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b168ae2b-a710-4978-811c-c4180ba56a99"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5054,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b368c9e-6331-457a-ad85-2bcfc0322c6e",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response).to.be.a(\"object\");\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 501 to equal 404",
                "estack": "AssertionError: expected 501 to equal 404\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:254:40)",
                "diff": "- 501\n+ 404\n"
              },
              "uuid": "41d6732b-bda2-484a-83f7-aab8d23214b5",
              "parentUUID": "1b368c9e-6331-457a-ad85-2bcfc0322c6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "41d6732b-bda2-484a-83f7-aab8d23214b5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 189,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ee43ad8-3413-479f-bc7a-2bde30233ac5",
          "title": "Test Scenario 6A: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6A: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response).to.be.a(\"object\");\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "95d3b9ca-98e6-402d-b3a8-f4fa31670764",
              "parentUUID": "8ee43ad8-3413-479f-bc7a-2bde30233ac5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95d3b9ca-98e6-402d-b3a8-f4fa31670764"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a036ca5-25d9-43d1-a6b1-b69223828372",
          "title": "Test Scenario 6B: method not supported DIDs",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises an error for unsupported DID methods",
              "fullTitle": "Test Scenario 6B: method not supported DIDs Raises an error for unsupported DID methods",
              "timedOut": null,
              "duration": 80,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"methodNotSupportedDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.body.didResolutionMetadata.error).contains(\"methodNotSupported\");\n      expect(response).to.be.a(\"object\"); // todo: should this be 404 or 400?\n      expect(response.status).to.eq(400); // returns 501\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 501 to equal 400",
                "estack": "AssertionError: expected 501 to equal 400\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:301:40)",
                "diff": "- 501\n+ 400\n"
              },
              "uuid": "77570119-7862-4790-a541-c322a81b7855",
              "parentUUID": "5a036ca5-25d9-43d1-a6b1-b69223828372",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "77570119-7862-4790-a541-c322a81b7855"
          ],
          "pending": [],
          "skipped": [],
          "duration": 80,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d55052d-e94c-4e70-b2ee-0434fe41fcec",
          "title": "Test Scenario 6C: invalid verificationMethod.id",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises error when verificationMethod.id is invalid",
              "fullTitle": "Test Scenario 6C: invalid verificationMethod.id Raises error when verificationMethod.id is invalid",
              "timedOut": null,
              "duration": 487,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidVerificationMethodId\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); // todo: should this be 404 or 400?\n      expect(response.status).to.eq(400); // return 200\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDidUrl\"); // doesn't exist\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:326:40)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "4ca4796d-68e0-47c1-ae96-e43ded08bab5",
              "parentUUID": "1d55052d-e94c-4e70-b2ee-0434fe41fcec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4ca4796d-68e0-47c1-ae96-e43ded08bab5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 487,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d01e4c57-2e42-4622-b013-21304ff882d7",
          "title": "Test Scenario 6D: invalid verificationMethod.controller",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises error when verificationMethod.controller is invalid",
              "fullTitle": "Test Scenario 6D: invalid verificationMethod.controller Raises error when verificationMethod.controller is invalid",
              "timedOut": null,
              "duration": 210,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidVerificationMethodController\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); // todo: should this be 404 or 400?\n      expect(response.status).to.eq(400); // returns 200\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\"); // doesn't exist\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:350:40)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "87cf2fcc-8ef2-48d5-a448-71240a9aa9f7",
              "parentUUID": "d01e4c57-2e42-4622-b013-21304ff882d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "87cf2fcc-8ef2-48d5-a448-71240a9aa9f7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d18b28b-db5a-4ec2-a5f6-ada7202c0b6e",
          "title": "Test Scenario 6E: invalid didDocument.id",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises error when didDocument.id is invalid",
              "fullTitle": "Test Scenario 6E: invalid didDocument.id Raises error when didDocument.id is invalid",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidDidDocumentId\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3b94d041-ff58-4ca6-8146-c59a9a57d4ac",
              "parentUUID": "5d18b28b-db5a-4ec2-a5f6-ada7202c0b6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b94d041-ff58-4ca6-8146-c59a9a57d4ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b5787b0b-dbec-4b04-acc2-831df529b6b0",
          "title": "Test Scenario 6F: Invalid didDocument scheme",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises invalidDid error when if scheme is not did",
              "fullTitle": "Test Scenario 6F: Invalid didDocument scheme Raises invalidDid error when if scheme is not did",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidDidScheme\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "5159bc8d-1bda-47dd-a5eb-417700ee5578",
              "parentUUID": "b5787b0b-dbec-4b04-acc2-831df529b6b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5159bc8d-1bda-47dd-a5eb-417700ee5578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 74,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b13fca3f-f9ea-449a-8b57-ed837a0086da",
          "title": "Test Scenario 6G: notAllowedLocalDerivedKey error/warning",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises notAllowedLocalDerivedKey error when did is incorrect",
              "fullTitle": "Test Scenario 6G: notAllowedLocalDerivedKey error/warning Raises notAllowedLocalDerivedKey error when did is incorrect",
              "timedOut": null,
              "duration": 629,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"notAllowedLocalDerivedKey\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"notAllowedLocalDerivedKey\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:417:40)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "01b550ce-7f79-4d9e-845c-c834e516fc76",
              "parentUUID": "b13fca3f-f9ea-449a-8b57-ed837a0086da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "01b550ce-7f79-4d9e-845c-c834e516fc76"
          ],
          "pending": [],
          "skipped": [],
          "duration": 629,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad373846-c060-49db-acf0-7d759f226110",
          "title": "Test Scenario 6H: notAllowedLocalDuplicateKey error/warning",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises notAllowedLocalDuplicateKey error when did is incorrect",
              "fullTitle": "Test Scenario 6H: notAllowedLocalDuplicateKey error/warning Raises notAllowedLocalDuplicateKey error when did is incorrect",
              "timedOut": null,
              "duration": 53,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidDidDocumentId\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"notAllowedLocalDuplicateKey\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 'invalidDid' to include 'notAllowedLocalDuplicateKey'",
                "estack": "AssertionError: expected 'invalidDid' to include 'notAllowedLocalDuplicateKey'\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:440:63)",
                "diff": null
              },
              "uuid": "a5cb760c-a71b-43e2-94d8-c85b825a3428",
              "parentUUID": "ad373846-c060-49db-acf0-7d759f226110",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a5cb760c-a71b-43e2-94d8-c85b825a3428"
          ],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c7bfcea3-caa3-447b-aaae-256038bda897",
          "title": "Test Scenario 6I: notAllowedKeyType error/warning",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises notAllowedKeyType error when did is incorrect",
              "fullTitle": "Test Scenario 6I: notAllowedKeyType error/warning Raises notAllowedKeyType error when did is incorrect",
              "timedOut": null,
              "duration": 82,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"invalidDidDocumentId\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"notAllowedKeyType\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 'invalidDid' to include 'notAllowedKeyType'",
                "estack": "AssertionError: expected 'invalidDid' to include 'notAllowedKeyType'\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:462:63)",
                "diff": null
              },
              "uuid": "e1a9e350-1a3e-4675-bdb7-c8c728236389",
              "parentUUID": "c7bfcea3-caa3-447b-aaae-256038bda897",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e1a9e350-1a3e-4675-bdb7-c8c728236389"
          ],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c96a3b9-f2b6-4820-b4a4-12d83def6777",
          "title": "Test Scenario 6J: notAllowedMethod error/warning",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Raises notAllowedMethod error when did is incorrect",
              "fullTitle": "Test Scenario 6J: notAllowedMethod error/warning Raises notAllowedMethod error when did is incorrect",
              "timedOut": null,
              "duration": 110,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"notAllowedMethod\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.status).to.eq(400);\n      expect(response.body.didResolutionMetadata.error).contains(\"notAllowedMethod\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 400",
                "estack": "AssertionError: expected 404 to equal 400\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:484:40)",
                "diff": "- 404\n+ 400\n"
              },
              "uuid": "bd5f78f1-7fe8-4e96-89ba-01cfdbacf4ea",
              "parentUUID": "3c96a3b9-f2b6-4820-b4a4-12d83def6777",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bd5f78f1-7fe8-4e96-89ba-01cfdbacf4ea"
          ],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "99c8e582-90d0-4ac0-ae76-0b5a891b8cf6",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 87,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:509:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "fb4cd85f-78c0-47be-98f9-b68e6c2bce74",
              "parentUUID": "99c8e582-90d0-4ac0-ae76-0b5a891b8cf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fb4cd85f-78c0-47be-98f9-b68e6c2bce74"
          ],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "50aa895a-18f0-4159-8b61-715d37c84ddf",
          "title": "Test Scenario 8: Service and relativeRef parameters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetches DID",
              "fullTitle": "Test Scenario 8: Service and relativeRef parameters Fetches DID",
              "timedOut": null,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"relativeParamDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    console.log(\"FRAGMENT DID IS\", fragmentDid);\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      headers: {\n        Accept: \"text/uri-list\"\n      },\n      failOnStatusCode: false\n    }).as(\"response\");\n    it(\"MUST return HTTP response status equals 303\", () => {\n      cy.get(\"@response\").then(response => {\n        expect(response.status).to.eq(303);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "87e27082-36ca-47b0-8fce-9c8f8740b447",
              "parentUUID": "50aa895a-18f0-4159-8b61-715d37c84ddf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87e27082-36ca-47b0-8fce-9c8f8740b447"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ac7cfbc-23a4-40ed-a0bb-d8719e16356a",
          "title": "Test Scenario 9: DID URLs with transformKeys",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 53,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"transformKeyDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const transformKeyDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + transformKeyDid,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response).to.be.a(\"object\");\n      response.body.verificationMethod.forEach(out => {\n        expect(out).has.property(\"type\").to.be.oneOf([\"JsonWebKey2020\", \"Ed25519VerificationKey2018\", \"X25519KeyAgreementKey2019\"]);\n      });\n      expect(response.headers[\"content-type\"]).contains(\"application/did+ld+json\");\n      expect(response.body).has.property(\"id\", decodeURIComponent(transformKeyDid.split(\"?\")[0].split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:564:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "3670d851-ae0a-4dd0-81c8-161480d662b2",
              "parentUUID": "8ac7cfbc-23a4-40ed-a0bb-d8719e16356a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3670d851-ae0a-4dd0-81c8-161480d662b2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7cacd6fb-596e-4f98-b9f0-dc533d55a4be",
          "title": "Test Scenario 10: DID URLs with versionTime parameter",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 87,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"versionTimeDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const versionTimeDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + versionTimeDid,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).contains(\"application/did+ld+json\");\n      expect(response).to.be.a(\"object\");\n      expect(response.body).has.property(\"id\").contains(\"did:sov:DjxRxnL4gXsncbH8jM8ySM\");\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:594:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "cbd0d972-adc8-4776-a7a7-52ae730cd002",
              "parentUUID": "7cacd6fb-596e-4f98-b9f0-dc533d55a4be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cbd0d972-adc8-4776-a7a7-52ae730cd002"
          ],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ed8ea5f7-b9db-477d-a7ba-759890fa5939",
          "title": "Test Scenario 11: DID URLs with versionId parameter",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"versionIdDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const versionIdDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + versionIdDid,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response).to.be.a(\"object\");\n      expect(response.headers[\"content-type\"]).contains(\"application/did+ld+json\");\n      expect(response.body).has.property(\"id\").contains(decodeURIComponent(versionIdDid.split(\"?\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:621:40)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "ac71bb2c-1f5e-40d0-b4dc-69fb60d1f117",
              "parentUUID": "ed8ea5f7-b9db-477d-a7ba-759890fa5939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ac71bb2c-1f5e-40d0-b4dc-69fb60d1f117"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c7b6043-1740-4881-a8ae-c6622cae1263",
          "title": "Test Scenario 12: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 5233,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).contains(\"application/did+json;charset=utf-8\");\n      expect(response.body).has.property(\"id\", normalDid); // expect(response.body[\"keyAgreement\"][0]).to.contain(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://dev.uniresolver.io/1.0/identifiers/did:sov:WRfXPg8dantKVubE3HX8pw\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:37727/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:37727/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:37727/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:37727/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:37727/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:37727/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:37727/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:37727/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:37727/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:650:13)",
                "diff": null
              },
              "uuid": "0f8b3316-3a02-4494-96d7-dc162c8d020b",
              "parentUUID": "8c7b6043-1740-4881-a8ae-c6622cae1263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0f8b3316-3a02-4494-96d7-dc162c8d020b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5233,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8125784f-ab05-4b57-9234-f7c9685ec32c",
          "title": "Test Scenario 12B: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12B: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 227,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(path_example_dids).its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: 'application/ld+json;profile=\"https://w3c-ccg.github.io/did-resolution/\"'\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).contains('application/ld+json; profile=\"https://w3c-ccg.github.io/did-resolution/\"');\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 406 to equal 200",
                "estack": "AssertionError: expected 406 to equal 200\n    at Context.eval (http://localhost:37727/__cypress/tests?p=cypress/integration/uniresolver_spec.js:675:40)",
                "diff": "- 406\n+ 200\n"
              },
              "uuid": "1996648e-f2db-42f7-b22c-264b8d9368c8",
              "parentUUID": "8125784f-ab05-4b57-9234-f7c9685ec32c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1996648e-f2db-42f7-b22c-264b8d9368c8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}